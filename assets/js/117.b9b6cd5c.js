(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{454:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"如何实现随机访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现随机访问"}},[t._v("#")]),t._v(" 如何实现随机访问")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("线性表数据结构")]),t._v(" "),s("ul",[s("li",[t._v("顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/assets/算法/线性表.webp"}})]),t._v(" "),s("li",[s("p",[t._v("随机访问特性")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("数组可以实现根据下标随机访问数组元素")])]),t._v(" "),s("li",[t._v("数组-----"),s("strong",[t._v("连续的内存空间和相同类型的数据")])]),t._v(" "),s("li",[s("img",{attrs:{src:"/assets/%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE.png",alt:""}})])])])]),t._v(" "),s("h2",{attrs:{id:"低效的插入和删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#低效的插入和删除"}},[t._v("#")]),t._v(" 低效的插入和删除")]),t._v(" "),s("blockquote",[s("p",[t._v("数组为了保持内存数据的连续性，会导致插入、删除这两个操作比较低效.")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("插入")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("数组是有序的时候，需要在第k个位置插入数据，需要将k后面的数据全部后移。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("高效")]),t._v("：但是当数组时无序的，没有规律的，需要在第k个位置插入数据时，可以使用"),s("strong",[t._v("搬移操作")])]),t._v(" "),s("ul",[s("li",[t._v("即，将原来第k个位置的元素放到数组最后，将要插入的元素，放到k位置。如下图所示。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%90%AC%E7%A7%BB.webp",alt:""}})])])])]),t._v(" "),s("li",[s("p",[t._v("删除")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("高效")]),t._v("：不直接删除元素，而是将要删除的元素进行标记，当达到一定量后，一块删除，这样可以避免多次数据的搬移。----"),s("strong",[t._v("JVM 标记清除垃圾回收算法的核心思想")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/%E7%AE%97%E6%B3%95/%E9%AB%98%E6%95%88%E5%88%A0%E9%99%A4.webp",alt:""}})])])])])]),t._v(" "),s("h2",{attrs:{id:"数组越界-c语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组越界-c语言"}},[t._v("#")]),t._v(" 数组越界---c语言")]),t._v(" "),s("p",[s("strong",[t._v("java语言在数组越界时，会抛出异常java.lang.ArrayIndexOutOfBoundsException")])]),t._v(" "),s("blockquote",[s("p",[t._v("下面这组代码会无限次输出 helloworld，而不是三次。")]),t._v(" "),s("p",[t._v("​\t原因是 a[3]这个内存地址，存放的是 "),s("code",[t._v("i=0")]),t._v(",所以i会一直重复从0到2。")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("内存问题")]),t._v(" "),s("ul",[s("li",[t._v("内存用栈存储，存储结构如下所示")])]),t._v(" "),s("img",{staticStyle:{zoom:"10%"},attrs:{src:"/assets/算法/栈存储.jpg"}}),t._v(" "),s("ul",[s("li",[t._v("所以在访问a[3]时，i=0，无限循环")])])])]),t._v(" "),s("h2",{attrs:{id:"容器与数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器与数组"}},[t._v("#")]),t._v(" 容器与数组")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("ArrayList---优势")]),t._v(" "),s("ul",[s("li",[t._v("可以将很多数组操作的细节封装起来，前面提到的数组插入、删除数据时需要搬移其他数据。")]),t._v(" "),s("li",[t._v("支持动态扩容。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。我们不需要关心底层的扩容逻辑。")])])]),t._v(" "),s("li",[s("p",[t._v("ArrayList---申请")]),t._v(" "),s("ul",[s("li",[t._v("因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好"),s("strong",[t._v("在创建 ArrayList 的时候事先指定数据大小")]),t._v("。")])])]),t._v(" "),s("li",[s("p",[t._v("数组与ArrayList")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类")]),t._v("，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果"),s("strong",[t._v("特别关注性能，或者希望使用基本类型，就可以选用数组")])]),t._v(" "),s("li",[t._v("如果数据大小事先已知，并且"),s("strong",[t._v("对数据的操作非常简单")]),t._v("，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。")]),t._v(" "),s("li",[t._v("当要表示多维数组时，用数组往往会更加直观。比如"),s("code",[t._v("Object[][] array")]),t._v("；而用容器的话则需要这样定义："),s("code",[t._v("ArrayList <ArrayList <object>> array")])])]),t._v(" "),s("p",[s("strong",[t._v("总结")]),t._v("：")]),t._v(" "),s("blockquote",[s("p",[t._v("​\t对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。")]),t._v(" "),s("p",[t._v("​\t但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。")])])])]),t._v(" "),s("h2",{attrs:{id:"leetcode练习题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode练习题"}},[t._v("#")]),t._v(" "),s("strong",[t._v("LeetCode练习题")])]),t._v(" "),s("ul",[s("li",[t._v("实现一个支持动态扩容的数组")]),t._v(" "),s("li",[t._v("实现一个大小固定的有序数组，支持动态增删改操作")]),t._v(" "),s("li",[t._v("实现两个有序数组合并为一个有序数组")])])])}),[],!1,null,null,null);s.default=r.exports}}]);