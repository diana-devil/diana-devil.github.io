(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{439:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要网关"}},[t._v("#")]),t._v(" 为什么需要网关")]),t._v(" "),a("p",[t._v("Gateway网关是我们服务的守门神，所有微服务的统一入口。")]),t._v(" "),a("p",[t._v("网关的"),a("strong",[t._v("核心功能特性")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("请求路由、负载均衡")]),t._v(" "),a("li",[t._v("权限控制、身份认证")]),t._v(" "),a("li",[t._v("请求限流")])]),t._v(" "),a("p",[t._v("架构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714210131152.png",alt:"image-20210714210131152"}})]),t._v(" "),a("p",[a("strong",[t._v("权限控制")]),t._v("：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。")]),t._v(" "),a("p",[a("strong",[t._v("路由和负载均衡")]),t._v("：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。")]),t._v(" "),a("p",[a("strong",[t._v("限流")]),t._v("：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。")]),t._v(" "),a("p",[t._v("在SpringCloud中网关的实现包括两种：")]),t._v(" "),a("ul",[a("li",[t._v("gateway")]),t._v(" "),a("li",[t._v("zuul")])]),t._v(" "),a("p",[t._v("Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。")]),t._v(" "),a("h2",{attrs:{id:"gateway快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway快速入门"}},[t._v("#")]),t._v(" gateway快速入门")]),t._v(" "),a("p",[t._v("下面，我们就演示下网关的基本路由功能。基本步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建SpringBoot工程gateway，引入网关依赖")]),t._v(" "),a("li",[t._v("编写启动类")]),t._v(" "),a("li",[t._v("编写基础配置和路由规则")]),t._v(" "),a("li",[t._v("启动网关服务进行测试")])]),t._v(" "),a("h3",{attrs:{id:"_1-创建gateway服务-引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建gateway服务-引入依赖"}},[t._v("#")]),t._v(" 1）创建gateway服务，引入依赖")]),t._v(" "),a("p",[t._v("创建服务：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714210919458.png",alt:"image-20210714210919458"}})]),t._v(" "),a("p",[t._v("引入依赖：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--网关--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-gateway"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--nacos服务发现依赖--\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.alibaba.cloud"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-cloud-starter-alibaba-nacos-discovery"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-编写启动类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-编写启动类"}},[t._v("#")]),t._v(" 2）编写启动类")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("cn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("itcast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autoconfigure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootApplication")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayApplication")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-编写基础配置和路由规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-编写基础配置和路由规则"}},[t._v("#")]),t._v(" 3）编写基础配置和路由规则")]),t._v(" "),a("p",[t._v("创建application.yml文件，内容如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10010")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 服务名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8848")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nacos地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网关路由配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由id，自定义，只要唯一即可")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的目标地址 lb就是负载均衡，后面跟服务名称")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由断言，也就是判断请求是否符合路由规则的条件")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是按照路径匹配，只要以/user/开头就符合要求")]),t._v("\n")])])]),a("p",[t._v("我们将符合"),a("code",[t._v("Path")]),t._v(" 规则的一切请求，都代理到 "),a("code",[t._v("uri")]),t._v("参数指定的地址。")]),t._v(" "),a("p",[t._v("本例中，我们将 "),a("code",[t._v("/user/**")]),t._v("开头的请求，代理到"),a("code",[t._v("lb://userservice")]),t._v("，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。")]),t._v(" "),a("h3",{attrs:{id:"_4-重启测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-重启测试"}},[t._v("#")]),t._v(" 4）重启测试")]),t._v(" "),a("p",[t._v("重启网关，访问http://localhost:10010/user/1时，符合"),a("code",[t._v("/user/**")]),t._v("规则，请求转发到uri：http://userservice/user/1，得到了结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714211908341.png",alt:"image-20210714211908341"}})]),t._v(" "),a("h3",{attrs:{id:"_5-网关路由的流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-网关路由的流程图"}},[t._v("#")]),t._v(" 5）网关路由的流程图")]),t._v(" "),a("p",[t._v("整个访问的流程如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714211742956.png",alt:"image-20210714211742956"}})]),t._v(" "),a("p",[t._v("总结：")]),t._v(" "),a("p",[t._v("网关搭建步骤：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建项目，引入nacos服务发现和gateway依赖")])]),t._v(" "),a("li",[a("p",[t._v("配置application.yml，包括服务基本信息、nacos地址、路由")])])]),t._v(" "),a("p",[t._v("路由配置包括：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("路由id：路由的唯一标示")])]),t._v(" "),a("li",[a("p",[t._v("路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡")])]),t._v(" "),a("li",[a("p",[t._v("路由断言（predicates）：判断路由的规则，")])]),t._v(" "),a("li",[a("p",[t._v("路由过滤器（filters）：对请求或响应做处理")])])]),t._v(" "),a("p",[t._v("接下来，就重点来学习路由断言和路由过滤器的详细知识")]),t._v(" "),a("h2",{attrs:{id:"断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断言工厂"}},[t._v("#")]),t._v(" 断言工厂")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories",target:"_blank",rel:"noopener noreferrer"}},[t._v("断言工厂官方文档"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件")]),t._v(" "),a("p",[t._v("例如Path=/user/**是按照路径匹配，这个规则是由")]),t._v(" "),a("p",[a("code",[t._v("org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory")]),t._v("类来")]),t._v(" "),a("p",[t._v("处理的，像这样的断言工厂在SpringCloudGateway还有十几个:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("名称")])]),t._v(" "),a("th",[a("strong",[t._v("说明")])]),t._v(" "),a("th",[a("strong",[t._v("示例")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("After")]),t._v(" "),a("td",[t._v("是某个时间点后的请求")]),t._v(" "),a("td",[t._v("-  After=2037-01-20T17:42:47.789-07:00[America/Denver]")])]),t._v(" "),a("tr",[a("td",[t._v("Before")]),t._v(" "),a("td",[t._v("是某个时间点之前的请求")]),t._v(" "),a("td",[t._v("-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]")])]),t._v(" "),a("tr",[a("td",[t._v("Between")]),t._v(" "),a("td",[t._v("是某两个时间点之前的请求")]),t._v(" "),a("td",[t._v("-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]")])]),t._v(" "),a("tr",[a("td",[t._v("Cookie")]),t._v(" "),a("td",[t._v("请求必须包含某些cookie")]),t._v(" "),a("td",[t._v("- Cookie=chocolate, ch.p")])]),t._v(" "),a("tr",[a("td",[t._v("Header")]),t._v(" "),a("td",[t._v("请求必须包含某些header")]),t._v(" "),a("td",[t._v("- Header=X-Request-Id, \\d+")])]),t._v(" "),a("tr",[a("td",[t._v("Host")]),t._v(" "),a("td",[t._v("请求必须是访问某个host（域名）")]),t._v(" "),a("td",[t._v("-  Host="),a("strong",[t._v(".somehost.org,")]),t._v(".anotherhost.org")])]),t._v(" "),a("tr",[a("td",[t._v("Method")]),t._v(" "),a("td",[t._v("请求方式必须是指定方式")]),t._v(" "),a("td",[t._v("- Method=GET,POST")])]),t._v(" "),a("tr",[a("td",[t._v("Path")]),t._v(" "),a("td",[t._v("请求路径必须符合指定规则")]),t._v(" "),a("td",[t._v("- Path=/red/{segment},/blue/**")])]),t._v(" "),a("tr",[a("td",[t._v("Query")]),t._v(" "),a("td",[t._v("请求参数必须包含指定参数")]),t._v(" "),a("td",[t._v("- Query=name, Jack或者-  Query=name")])]),t._v(" "),a("tr",[a("td",[t._v("RemoteAddr")]),t._v(" "),a("td",[t._v("请求者的ip必须是指定范围")]),t._v(" "),a("td",[t._v("- RemoteAddr=192.168.1.1/24")])]),t._v(" "),a("tr",[a("td",[t._v("Weight")]),t._v(" "),a("td",[t._v("权重处理")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("我们只需要掌握Path这种路由工程就可以了。")]),t._v(" "),a("h2",{attrs:{id:"过滤器工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器工厂"}},[t._v("#")]),t._v(" 过滤器工厂")]),t._v(" "),a("p",[t._v("GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714212312871.png",alt:"image-20210714212312871"}})]),t._v(" "),a("h3",{attrs:{id:"_3-4-1-路由过滤器的种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-路由过滤器的种类"}},[t._v("#")]),t._v(" 3.4.1.路由过滤器的种类")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring提供了31种不同的路由过滤器工厂"),a("OutboundLink")],1),t._v("。例如：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("名称")])]),t._v(" "),a("th",[a("strong",[t._v("说明")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AddRequestHeader")]),t._v(" "),a("td",[t._v("给当前请求添加一个请求头")])]),t._v(" "),a("tr",[a("td",[t._v("RemoveRequestHeader")]),t._v(" "),a("td",[t._v("移除请求中的一个请求头")])]),t._v(" "),a("tr",[a("td",[t._v("AddResponseHeader")]),t._v(" "),a("td",[t._v("给响应结果中添加一个响应头")])]),t._v(" "),a("tr",[a("td",[t._v("RemoveResponseHeader")]),t._v(" "),a("td",[t._v("从响应结果中移除有一个响应头")])]),t._v(" "),a("tr",[a("td",[t._v("RequestRateLimiter")]),t._v(" "),a("td",[t._v("限制请求的流量")])])])]),t._v(" "),a("h3",{attrs:{id:"请求头过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求头过滤器"}},[t._v("#")]),t._v(" 请求头过滤器")]),t._v(" "),a("p",[t._v("下面我们以AddRequestHeader 为例来讲解。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("需求")]),t._v("：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!")])]),t._v(" "),a("p",[t._v("只需要修改gateway服务的application.yml文件，添加路由过滤即可：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service \n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice \n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 过滤器")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddRequestHeader=Truth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Itcast is freaking awesome"),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加请求头")]),t._v("\n")])])]),a("p",[t._v("当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。")]),t._v(" "),a("h3",{attrs:{id:"默认过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认过滤器"}},[t._v("#")]),t._v(" 默认过滤器")]),t._v(" "),a("p",[t._v("如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service \n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//userservice \n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/user/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default-filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认过滤项")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddRequestHeader=Truth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Itcast is freaking awesome"),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v(" \n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("过滤器的作用是什么？")]),t._v(" "),a("p",[t._v("① 对路由的请求或响应做加工处理，比如添加请求头")]),t._v(" "),a("p",[t._v("② 配置在路由下的过滤器只对当前路由的请求生效")]),t._v(" "),a("p",[t._v("defaultFilters的作用是什么？")]),t._v(" "),a("p",[t._v("① 对所有路由都生效的过滤器")]),t._v(" "),a("h2",{attrs:{id:"全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器"}},[t._v("#")]),t._v(" 全局过滤器")]),t._v(" "),a("p",[a("strong",[t._v("上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。")])]),t._v(" "),a("h3",{attrs:{id:"全局过滤器作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局过滤器作用"}},[t._v("#")]),t._v(" 全局过滤器作用")]),t._v(" "),a("p",[t._v("全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。"),a("strong",[t._v("区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。")])]),t._v(" "),a("p",[t._v("定义方式是实现GlobalFilter接口。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理\n     *\n     * @param exchange 请求上下文，里面可以获取Request、Response等信息\n     * @param chain 用来把请求委托给下一个过滤器 \n     * @return {@code Mono<Void>} 返回标示当前过滤器业务结束\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在filter中编写自定义逻辑，可以实现下列功能：")]),t._v(" "),a("ul",[a("li",[t._v("登录状态判断")]),t._v(" "),a("li",[t._v("权限校验")]),t._v(" "),a("li",[t._v("请求限流等")])]),t._v(" "),a("h3",{attrs:{id:"自定义全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义全局过滤器"}},[t._v("#")]),t._v(" 自定义全局过滤器")]),t._v(" "),a("p",[t._v("需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("参数中是否有authorization，")])]),t._v(" "),a("li",[a("p",[t._v("authorization参数值是否为admin")])])]),t._v(" "),a("p",[t._v("如果同时满足则放行，否则拦截")]),t._v(" "),a("p",[t._v("实现：")]),t._v(" "),a("p",[t._v("在gateway中定义一个过滤器：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("cn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("itcast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stereotype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("reactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.获取请求参数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MultiValueMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" params "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueryParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.获取authorization参数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" auth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"authorization"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.校验")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"admin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放行")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.拦截")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.1.禁止访问，设置状态码")]),t._v("\n        exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.2.结束处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"过滤器执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器执行顺序"}},[t._v("#")]),t._v(" 过滤器执行顺序")]),t._v(" "),a("p",[t._v("请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter")]),t._v(" "),a("p",[t._v("请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：")]),t._v(" "),a("blockquote",[a("p",[t._v("路由过滤器和DefaultFilter过滤器是一类过滤器，只不过是作用范围不一样，都是GatewayFilter")]),t._v(" "),a("p",[t._v("而GlobalFilter，在网关内部，会被一个过滤器适配器（GatewayFilterAdapter）转换成GatewayFilter")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714214228409.png",alt:"image-20210714214228409"}})]),t._v(" "),a("p",[t._v("排序的规则是什么呢？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("每一个过滤器都必须指定一个int类型的order值，"),a("strong",[t._v("order值越小，优先级越高，执行顺序越靠前")]),t._v("。")])]),t._v(" "),a("li",[t._v("GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定")]),t._v(" "),a("li",[a("strong",[t._v("路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。")])]),t._v(" "),a("li",[t._v("当过滤器的order值一样时，会按照 "),a("strong",[t._v("defaultFilter > 路由过滤器 > GlobalFilter的顺序执行")]),t._v("。")])]),t._v(" "),a("p",[t._v("详细内容，可以查看源码：")]),t._v(" "),a("p",[a("code",[t._v("org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()")]),t._v("方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。")]),t._v(" "),a("p",[a("code",[t._v("org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()")]),t._v("方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链")]),t._v(" "),a("h2",{attrs:{id:"跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题"}},[t._v("#")]),t._v(" 跨域问题")]),t._v(" "),a("h3",{attrs:{id:"什么是跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域问题"}},[t._v("#")]),t._v(" 什么是跨域问题")]),t._v(" "),a("p",[t._v("跨域：域名不一致就是跨域，主要包括：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("域名不同： www.taobao.com 和 www.taobao.org 和 www.jd.com 和 miaosha.jd.com")])]),t._v(" "),a("li",[a("p",[t._v("域名相同，端口不同：localhost:8080和localhost8081")])])]),t._v(" "),a("p",[t._v("跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题")]),t._v(" "),a("p",[t._v("解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看https://www.ruanyifeng.com/blog/2016/04/cors.html")]),t._v(" "),a("h3",{attrs:{id:"模拟跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟跨域问题"}},[t._v("#")]),t._v(" 模拟跨域问题")]),t._v(" "),a("p",[t._v("找到课前资料的页面文件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714215713563.png",alt:"image-20210714215713563"}})]),t._v(" "),a("p",[t._v("放入tomcat或者nginx这样的web服务器中，启动并访问。")]),t._v(" "),a("p",[t._v("可以在浏览器控制台看到下面的错误：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/image-20210714215832675.png",alt:"image-20210714215832675"}})]),t._v(" "),a("p",[t._v("从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。")]),t._v(" "),a("h3",{attrs:{id:"解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域问题"}},[t._v("#")]),t._v(" 解决跨域问题")]),t._v(" "),a("p",[t._v("在gateway服务的application.yml文件中，添加下面的配置：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 。。。")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("globalcors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局的跨域处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("add-to-simple-url-handler-mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 解决options请求被拦截问题")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("corsConfigurations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'[/**]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedOrigins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许哪些网站的跨域请求 ")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8090"')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedMethods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许的跨域ajax的请求方式")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OPTIONS"')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowedHeaders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许在请求中携带的头信息")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("allowCredentials")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否允许携带cookie")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("maxAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("360000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这次跨域检测的有效期")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);