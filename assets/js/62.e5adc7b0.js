(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{400:function(e,v,_){"use strict";_.r(v);var s=_(2),t=Object(s.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"过期key处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#过期key处理"}},[e._v("#")]),e._v(" 过期key处理")]),e._v(" "),v("p",[e._v("Redis之所以性能强，最主要的原因就是基于内存存储。然而单节点的Redis其内存大小不宜过大，会影响持久化或主从同步性能。\n我们可以通过修改配置文件来设置Redis的最大内存：")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983341150.png",alt:"1653983341150"}})]),e._v(" "),v("p",[e._v("当内存使用达到上限时，就无法存储更多数据了。为了解决这个问题，Redis提供了一些策略实现内存回收：")]),e._v(" "),v("p",[e._v("内存过期策略")]),e._v(" "),v("p",[e._v("在学习Redis缓存的时候我们说过，可以通过expire命令给Redis的key设置TTL（存活时间）：")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983366243.png",alt:"1653983366243"}})]),e._v(" "),v("p",[e._v("可以发现，当key的TTL到期以后，再次访问name返回的是nil，说明这个key已经不存在了，对应的内存也得到释放。从而起到内存回收的目的。")]),e._v(" "),v("p",[e._v("Redis本身是一个典型的key-value内存存储数据库，因此所有的key、value都保存在之前学习过的Dict结构中。不过在其database结构体中，有两个Dict：一个用来记录key-value；另一个用来记录key-TTL。")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983423128.png",alt:"1653983423128"}})]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983606531.png",alt:"1653983606531"}})]),e._v(" "),v("p",[e._v("这里有两个问题需要我们思考：\nRedis是如何知道一个key是否过期呢？")]),e._v(" "),v("p",[e._v("利用两个Dict分别记录key-value对及key-ttl对")]),e._v(" "),v("p",[e._v("是不是TTL到期就立即删除了呢？")]),e._v(" "),v("p",[v("strong",[e._v("惰性删除")])]),e._v(" "),v("p",[e._v("惰性删除：顾明思议并不是在TTL到期后就立刻删除，而是在访问一个key的时候，检查该key的存活时间，如果已经过期才执行删除。")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983652865.png",alt:"1653983652865"}})]),e._v(" "),v("p",[v("strong",[e._v("周期删除")])]),e._v(" "),v("p",[e._v("周期删除：顾明思议是通过一个定时任务，周期性的抽样部分过期的key，然后执行删除。执行周期有两种：\nRedis服务初始化函数initServer()中设置定时任务，按照server.hz的频率来执行过期key清理，模式为SLOW\nRedis的每个事件循环前会调用beforeSleep()函数，执行过期key清理，模式为FAST")]),e._v(" "),v("p",[e._v("周期删除：顾明思议是通过一个定时任务，周期性的抽样部分过期的key，然后执行删除。执行周期有两种：\nRedis服务初始化函数initServer()中设置定时任务，按照server.hz的频率来执行过期key清理，模式为SLOW\nRedis的每个事件循环前会调用beforeSleep()函数，执行过期key清理，模式为FAST")]),e._v(" "),v("p",[e._v("SLOW模式规则：")]),e._v(" "),v("ul",[v("li",[e._v("执行频率受server.hz影响，默认为10，即每秒执行10次，每个执行周期100ms。")]),e._v(" "),v("li",[e._v("执行清理耗时不超过一次执行周期的25%.默认slow模式耗时不超过25ms")]),e._v(" "),v("li",[e._v("逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期")]),e._v(" "),v("li",[e._v("如果没达到时间上限（25ms）并且过期key比例大于10%，再进行一次抽样，否则结束")]),e._v(" "),v("li",[e._v("FAST模式规则（过期key比例小于10%不执行 ）：")]),e._v(" "),v("li",[e._v("执行频率受beforeSleep()调用频率影响，但两次FAST模式间隔不低于2ms")]),e._v(" "),v("li",[e._v("执行清理耗时不超过1ms")]),e._v(" "),v("li",[e._v("逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期\n如果没达到时间上限（1ms）并且过期key比例大于10%，再进行一次抽样，否则结束")])]),e._v(" "),v("p",[e._v("小总结：")]),e._v(" "),v("p",[e._v("RedisKey的TTL记录方式：")]),e._v(" "),v("p",[e._v("在RedisDB中通过一个Dict记录每个Key的TTL时间")]),e._v(" "),v("p",[e._v("过期key的删除策略：")]),e._v(" "),v("p",[e._v("惰性清理：每次查找key时判断是否过期，如果过期则删除")]),e._v(" "),v("p",[e._v("定期清理：定期抽样部分key，判断是否过期，如果过期则删除。\n定期清理的两种模式：")]),e._v(" "),v("p",[e._v("SLOW模式执行频率默认为10，每次不超过25ms")]),e._v(" "),v("p",[e._v("FAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms")]),e._v(" "),v("h2",{attrs:{id:"内存淘汰策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存淘汰策略"}},[e._v("#")]),e._v(" 内存淘汰策略")]),e._v(" "),v("p",[e._v("内存淘汰：就是当Redis内存使用达到设置的上限时，主动挑选部分key删除以释放更多内存的流程。Redis会在处理客户端命令的方法processCommand()中尝试做内存淘汰：")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653983978671.png",alt:"1653983978671"}})]),e._v(" "),v("p",[e._v("淘汰策略")]),e._v(" "),v("p",[e._v("Redis支持8种不同策略来选择要删除的key：")]),e._v(" "),v("ul",[v("li",[e._v("noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。")]),e._v(" "),v("li",[e._v("volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰")]),e._v(" "),v("li",[e._v("allkeys-random：对全体key ，随机进行淘汰。也就是直接从db->dict中随机挑选")]),e._v(" "),v("li",[e._v("volatile-random：对设置了TTL的key ，随机进行淘汰。也就是从db->expires中随机挑选。")]),e._v(" "),v("li",[e._v("allkeys-lru： 对全体key，基于LRU算法进行淘汰")]),e._v(" "),v("li",[e._v("volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰")]),e._v(" "),v("li",[e._v("allkeys-lfu： 对全体key，基于LFU算法进行淘汰")]),e._v(" "),v("li",[e._v("volatile-lfu： 对设置了TTL的key，基于LFI算法进行淘汰\n比较容易混淆的有两个：\n"),v("ul",[v("li",[e._v("LRU（Least Recently Used），最少最近使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。")]),e._v(" "),v("li",[e._v("LFU（Least Frequently Used），最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。")])])])]),e._v(" "),v("p",[e._v("Redis的数据都会被封装为RedisObject结构：")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653984029506.png",alt:"1653984029506"}})]),e._v(" "),v("p",[e._v("LFU的访问次数之所以叫做逻辑访问次数，是因为并不是每次key被访问都计数，而是通过运算：")]),e._v(" "),v("ul",[v("li",[e._v("生成0~1之间的随机数R")]),e._v(" "),v("li",[e._v("计算 (旧次数 * lfu_log_factor + 1)，记录为P")]),e._v(" "),v("li",[e._v("如果 R < P ，则计数器 + 1，且最大不超过255")]),e._v(" "),v("li",[e._v("访问次数会随时间衰减，距离上一次访问时间每隔 lfu_decay_time 分钟，计数器 -1")])]),e._v(" "),v("p",[e._v("最后用一副图来描述当前的这个流程吧")]),e._v(" "),v("p",[v("img",{attrs:{src:"/assets/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/1653984085095.png",alt:"1653984085095"}})])])}),[],!1,null,null,null);v.default=t.exports}}]);