(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{367:function(t,e,s){"use strict";s.r(e);var n=s(2),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"listener"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listener"}},[t._v("#")]),t._v(" Listener")]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。")])]),t._v(" "),e("li",[e("p",[t._v("监听器可以监听就是在 "),e("code",[t._v("application")]),t._v("，"),e("code",[t._v("session")]),t._v("，"),e("code",[t._v("request")]),t._v(" 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。")]),t._v(" "),e("p",[t._v("request 和 session 我们学习过。而 "),e("code",[t._v("application")]),t._v(" 是 "),e("code",[t._v("ServletContext")]),t._v(" 类型的对象。")]),t._v(" "),e("p",[e("code",[t._v("ServletContext")]),t._v(" 代表整个web应用，在服务器启动的时候，tomcat会自动创建该对象。在服务器关闭时会自动销毁该对象。")])])]),t._v(" "),e("h2",{attrs:{id:"分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),e("p",[t._v("JavaWeb 提供了8个监听器：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"/assets/后端/JavaWeb/image-20210823230820586.png",alt:"image-20210823230820586"}}),t._v(" "),e("p",[t._v("这里面只有 "),e("code",[t._v("ServletContextListener")]),t._v(" 这个监听器后期我们会接触到，"),e("code",[t._v("ServletContextListener")]),t._v(" 是用来监听 "),e("code",[t._v("ServletContext")]),t._v(" 对象的创建和销毁。")]),t._v(" "),e("p",[e("code",[t._v("ServletContextListener")]),t._v(" 接口中有以下两个方法")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("void contextInitialized(ServletContextEvent sce)")]),t._v("："),e("code",[t._v("ServletContext")]),t._v(" 对象被创建了会自动执行的方法")]),t._v(" "),e("li",[e("code",[t._v("void contextDestroyed(ServletContextEvent sce)")]),t._v("："),e("code",[t._v("ServletContext")]),t._v(" 对象被销毁时会自动执行的方法")])]),t._v(" "),e("h2",{attrs:{id:"代码演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码演示"}},[t._v("#")]),t._v(" 代码演示")]),t._v(" "),e("p",[t._v("我们只演示一下 "),e("code",[t._v("ServletContextListener")]),t._v(" 监听器")]),t._v(" "),e("ul",[e("li",[t._v("定义一个类，实现"),e("code",[t._v("ServletContextListener")]),t._v(" 接口")]),t._v(" "),e("li",[t._v("重写所有的抽象方法")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("@WebListener")]),t._v(" 进行配置")])]),t._v(" "),e("p",[t._v("代码如下：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@WebListener")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContextLoaderListener")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletContextListener")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("contextInitialized")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletContextEvent")]),t._v(" sce"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加载资源")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ContextLoaderListener..."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("contextDestroyed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletContextEvent")]),t._v(" sce"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//释放资源")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("启动服务器，就可以在启动的日志信息中看到 "),e("code",[t._v("contextInitialized()")]),t._v(" 方法输出的内容，同时也说明了 "),e("code",[t._v("ServletContext")]),t._v(" 对象在服务器启动的时候被创建了。")])])}),[],!1,null,null,null);e.default=a.exports}}]);