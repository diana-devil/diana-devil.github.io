(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{470:function(v,_,t){"use strict";t.r(_);var s=t(2),l=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("strong",[v._v("去的过程叫“递”，回来的过程叫“归”")])]),v._v(" "),_("h2",{attrs:{id:"递归需要满足的三个条件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#递归需要满足的三个条件"}},[v._v("#")]),v._v(" 递归需要满足的三个条件")]),v._v(" "),_("ul",[_("li",[v._v("一个问题的解可以分解为"),_("strong",[v._v("一个或几个子问题")]),v._v("的解")]),v._v(" "),_("li",[v._v("这个问题与分解之后的子问题，除了数据规模不同，"),_("strong",[v._v("求解思路完全一样")])]),v._v(" "),_("li",[_("strong",[v._v("存在递归终止条件")])])]),v._v(" "),_("h2",{attrs:{id:"如何编写递归代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何编写递归代码"}},[v._v("#")]),v._v(" 如何编写递归代码")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("写出递推公式，找到终止条件")])]),v._v(" "),_("blockquote",[_("p",[v._v("​\t写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。")])])]),v._v(" "),_("li",[_("p",[v._v("==不要试图去分解递归的每个步骤==")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t编写递归代码的关键是，只要遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。")])])])]),v._v(" "),_("h2",{attrs:{id:"警惕堆栈溢出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#警惕堆栈溢出"}},[v._v("#")]),v._v(" ==警惕堆栈溢出==")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("溢出原因")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t函数调用会使用栈来保存临时变量。"),_("strong",[v._v("每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。")])]),v._v(" "),_("p",[v._v("​\t系统栈或者虚拟机栈空间一般都不大。如果递归求解的数据规模很大，调用层次很深，"),_("strong",[v._v("一直压入栈，就会有堆栈溢出的风险。")])])])]),v._v(" "),_("li",[_("p",[v._v("如何避免")]),v._v(" "),_("blockquote",[_("p",[v._v("​\t我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题。")]),v._v(" "),_("p",[v._v("​\t但这种做法并不能完全解决问题，因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算。如果实时计算，代码过于复杂，就会影响代码的可读性。")]),v._v(" "),_("p",[v._v("​\t所以，如果最大深度比较小，比如 10、50，就可以用这种方法，"),_("strong",[v._v("否则这种方法并不是很实用。")])]),v._v(" "),_("p",[v._v("​\t最好的方法 是"),_("strong",[v._v("如果遇到深层次的递归调用，就将其转换成迭代来实现")])])])])]),v._v(" "),_("h2",{attrs:{id:"警惕重复计算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#警惕重复计算"}},[v._v("#")]),v._v(" ==警惕重复计算==")]),v._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"/assets/算法/递归重复计算.webp"}}),v._v(" "),_("blockquote",[_("p",[v._v("​\t从图中，我们可以直观地看到，想要计算 f(5)，需要先计算 f(4) 和 f(3)，而计算 f(4) 还需要计算 f(3)，因此，f(3) 就被计算了很多次，这就是重复计算问题。")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("解决办法")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("我们可以通过一个数据结构（比如散列表）来保存已经求解过的 f(k)")])]),v._v(" "),_("blockquote",[_("p",[v._v("​\t当递归调用到 f(k) 时，先看下是否已经求解过了。如果是，则直接从散列表中取值返回，不需要重复计算，这样就能避免刚讲的问题了。")])])]),v._v(" "),_("li",[_("p",[v._v("==像这种避免重复计算的思想很重要==")])])])])]),v._v(" "),_("h2",{attrs:{id:"递归代码改为非递归代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#递归代码改为非递归代码"}},[v._v("#")]),v._v(" 递归代码改为非递归代码")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("递归优点")]),v._v(" "),_("ul",[_("li",[v._v("代码的表达力很强，写起来简洁。")])])]),v._v(" "),_("li",[_("p",[v._v("递归缺点")]),v._v(" "),_("ul",[_("li",[v._v("容易造成堆栈溢出")]),v._v(" "),_("li",[v._v("容易造成重复计算")]),v._v(" "),_("li",[v._v("空间复杂度搞——"),_("strong",[v._v("因为递归调用一次就会在内存栈中保存一次现场数据")])]),v._v(" "),_("li",[v._v("时间复杂度较高——递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积聚成一个可观的时间成本")])])]),v._v(" "),_("li",[_("p",[v._v("用"),_("strong",[v._v("迭代循环")]),v._v("代替递归")]),v._v(" "),_("ul",[_("li",[v._v("基本上所有的递归代码都可以借助"),_("strong",[v._v("迭代循环")]),v._v("来实现")])])])])])}),[],!1,null,null,null);_.default=l.exports}}]);