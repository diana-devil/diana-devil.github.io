(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{456:function(t,s,a){"use strict";a.r(s);var v=a(2),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"链表结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表结构"}},[t._v("#")]),t._v(" 链表结构")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("链表与数组")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("底层存储")]),t._v(" "),s("ul",[s("li",[t._v("数组需要一块连续的空间，而链表只需要一些零散的内存快即可。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%86%85%E5%AD%98.webp",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("性能比拼1")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%A7%E8%83%BD.webp",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("性能比拼2\n"),s("ul",[s("li",[t._v("数组简单易用，在实现上使用的是连续的内存空间，"),s("strong",[t._v("可以借助 CPU 的缓存机制，预读数组中的数据")]),t._v("，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。")]),t._v(" "),s("li",[t._v("除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。")]),t._v(" "),s("li",[t._v("而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）")])])])])]),t._v(" "),s("li",[s("p",[t._v("单链表")])])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/assets/算法/单链表.webp"}}),t._v(" "),s("ul",[s("li",[t._v("双链表\n"),s("ul",[s("li",[t._v("实际中双向链表应用更广，比单链表效率要高。找到前驱只需要O(1)")]),t._v(" "),s("li",[t._v("Linklist,LinkedHashMap 等都是双向链表。")]),t._v(" "),s("li",[t._v("Linklist——默认删除是从头结点开始删除的。")])])])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/assets/算法/双向链表.webp"}}),t._v(" "),s("ul",[s("li",[t._v("循环链表")])]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/assets/算法/循环链表.webp"}}),t._v(" "),s("h2",{attrs:{id:"基于链表实现lru缓存淘汰算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于链表实现lru缓存淘汰算法"}},[t._v("#")]),t._v(" 基于链表实现LRU缓存淘汰算法")]),t._v(" "),s("ul",[s("li",[t._v("缓存")])]),t._v(" "),s("blockquote",[s("p",[t._v("​\t缓存是为了缓解慢速的内存与快速的CPU之间矛盾而产生的，访问速度极快。")]),t._v(" "),s("p",[t._v("​\t缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有三种：先进先出策略 ==FIFO==（First In，First Out）、最少使用策略 ==LFU==（Least Frequently Used）、最近最少使用策略 ==LRU==（Least Recently Used）")]),t._v(" "),s("p",[t._v("​\tLRU 策略，使得页面置换次数低，抖动次数少。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("算法思想")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。---头插法\n")])])])]),t._v(" "),s("ul",[s("li",[t._v("如果此数据之前被缓存进链表中了，我们遍历得到这个链表的结点，并将原来的位置删除，将该节点插入链表的头部。")]),t._v(" "),s("li",[t._v("如果此数据没有在缓存链表中，则：\n"),s("ul",[s("li",[t._v("如果缓存未满，则直接插入到链表的头部。")]),t._v(" "),s("li",[t._v("如果此时缓存已经满了，则删除链表尾部的内容，然后将新的数据结点插入链表的头部。")])])])])]),t._v(" "),s("li",[s("p",[t._v("代码实现")])])]),t._v(" "),s("h2",{attrs:{id:"判断一个字符串是否是回文串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断一个字符串是否是回文串"}},[t._v("#")]),t._v(" 判断一个字符串是否是回文串")]),t._v(" "),s("ul",[s("li",[t._v("算法思想(双向链表)\n"),s("ul",[s("li",[t._v("用快慢指针找到链表的中点(当快指针走到头时，慢指针就恰好走到中间)")]),t._v(" "),s("li",[s("strong",[t._v("然后慢指针在往反方向走，走到表头，相当于是反向遍历链表左半部分(双向链表)")])]),t._v(" "),s("li",[t._v("同时，正向遍历链表的右半部分，并且将二者数据进行比较，如果完全一致，则说明是回文串。")])])]),t._v(" "),s("li",[t._v("算法思想(单链表)\n"),s("ul",[s("li",[t._v("用快慢指针找到链表的中点(当快指针走到头时，慢指针就恰好走到中间)")]),t._v(" "),s("li",[s("strong",[t._v("将单链表后半部分逆序，就是慢指针的next部分。一直遍历知道链表尾部")])]),t._v(" "),s("li",[t._v("同时，正向遍历链表的前半部分，并且将二者数据进行比较，如果完全一致，则说明是回文串。")]),t._v(" "),s("li",[t._v("最后将后半部分复原")])])])]),t._v(" "),s("h2",{attrs:{id:"如何轻松写出正确的链表代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何轻松写出正确的链表代码"}},[t._v("#")]),t._v(" 如何轻松写出正确的链表代码")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("理解指针或引用的含义")]),t._v(" "),s("blockquote",[s("p",[t._v("​\t将某个变量赋值给指针，实际上就是将这个"),s("strong",[t._v("变量的地址赋值给指针")]),t._v("，或者反过来说，"),s("strong",[t._v("指针中存储了这个变量的内存地址，指向了这个变量")]),t._v("，通过指针就能找到这个变量。")]),t._v(" "),s("p",[t._v("​\tC语言--指针，Python，Java--引用")])])]),t._v(" "),s("li",[s("p",[t._v("警惕指针丢失和内存泄漏")]),t._v(" "),s("ul",[s("li",[t._v("我们插入结点时，一定要注意操作的顺序。(先把next指向存好，在将next指向其他地方)")]),t._v(" "),s("li",[t._v("删除链表结点时，也一定要记得手动释放内存空间，否则，也会出现内存泄漏的问题。当然，对于像 Java 这种虚拟机自动管理内存的编程语言来说，就不需要考虑这么多了。")])])]),t._v(" "),s("li",[s("p",[t._v("利用哨兵简化实现难度")]),t._v(" "),s("ul",[s("li",[t._v("不利用哨兵的话，插入和删除，都需要考虑边界上的特殊结点。第一个和最后一个。")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" 插入操作\nnew_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("需要额外考虑插入的结点是不是第一个结点\n  head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("删除操作\np"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("需要额外考虑删除的结点是不是最后一个结点\n   head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("引入头结点，即哨兵，head指针会一直指向这个头结点。有了这个头结点，插入和删除代码就统一了。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("重点留意边界条件处理")])]),t._v(" "),s("p",[t._v("==健壮性==")]),t._v(" "),s("blockquote",[s("p",[t._v("​\t在写任何代码时，也千万不要只是实现业务正常情况下的功能就好了，一定要多想想，你的代码在运行的时候，可能会遇到哪些边界情况或者异常情况。遇到了应该如何应对，这样写出来的代码才够健壮！")])]),t._v(" "),s("ul",[s("li",[t._v("如果链表为空时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("如果链表只包含一个结点时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("如果链表只包含两个结点时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("代码逻辑在处理头结点和尾结点的时候，是否能正常工作？")])])]),t._v(" "),s("li",[s("p",[t._v("举例画图，辅助思考")])]),t._v(" "),s("li",[s("p",[t._v("多写多练，没有捷径")])])]),t._v(" "),s("h2",{attrs:{id:"leetcode练习题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode练习题"}},[t._v("#")]),t._v(" ==LeetCode练习题==")]),t._v(" "),s("ul",[s("li",[t._v("实现单链表、循环链表、双向链表，支持增删操作")]),t._v(" "),s("li",[t._v("实现单链表反转")]),t._v(" "),s("li",[t._v("实现两个有序的链表合并为一个有序链表")]),t._v(" "),s("li",[t._v("实现求链表的中间结点")]),t._v(" "),s("li",[t._v("链表中环的检测")])])])}),[],!1,null,null,null);s.default=_.exports}}]);